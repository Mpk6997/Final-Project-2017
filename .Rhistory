shiny::runApp()
install.packages("shiny")
install.packages("shiny")
shiny::runApp()
?plotlyoutput
?plotlyOutput
??plotlyOutput
library(shiny)
library(twitteR)
# Team:
#
# Ben Basinski
#
#
#
#
shinyServer(function(input, output) {
library(shiny)
library(twitteR)
source("./scripts/twitterauth.r")
source("./scripts/wordcloud.r")
source("./scripts/location.r")
source("./scripts/plot.r")
#Authentication
Twitter.Auth()
#Calls the function to get tweet content from twitter depending on the type of search
getTweets <- function() {
searchterm <- tolower(input$searchId)
if (input$searchInput == "Search") {
tweets <- getTweetsFromSearch(searchterm, input$nResults)
} else if (input$searchInput == "Trending") {
tweets <- getTweetsFromSearch(searchterm, input$nResults)
} else {
tweets <- getTweetsFromUser(searchterm, input$nResults)
}
return (tweets)
}
#calls the getTweets function only when the search button is pressed
tweets <- eventReactive(
input$Search,{getTweets()}
)
#renders the text at the top of the page for the search that is being done
output$search <- renderText({
if (input$searchInput == 'Search') {
paste("Search: ", input$searchId)
} else if (input$searchInput == 'Trending') {
paste("Trend: ", input$searchId)
} else {
paste("User: ", input$searchId)
}
})
#outputs a regular word cloud to the page
output$wordcloud <- renderPlot({
getWordCloud(tweets())
})
#outputs a sentiment word could to the page (only contains words with sentiments)
output$sentimentcloud <- renderPlot({
getSentimentCloud(tweets())
})
#outputs a bar graph of the types of emotions that are expressed in the tweets
output$feeling <- renderPlotly({
getFeeling(tweets())
})
#the function that figures out the type of search that the user wants to do
searchtype <- reactive(
if (input$searchInput == "Trending") {
selectInput(inputId = 'searchId', 'Select a trend:', getTrendsWC(23424977)) #trends nationwide
} else if (input$searchInput == "Search") {
textInput(inputId = "searchId", "Enter Search:", "uw")
} else {
textInput(inputId = "searchId", "Enter Username: (exclude @)", "katyperry")
}
)
#outputs the type of search the user wants to do from the function searchType()
output$searchtype <- renderUI({
searchtype()
})
# renders the map for the second tab
output$map <- renderPlotly({
df <- read.csv("./Data/city_data.csv")
g <- Top.Map(df)
g
})
# renders the plot for the third tab
output$accounts <- renderPlotly({
y.axis <- input$y_input
accountChart(y.axis)
})
})
library(tidytext)
library(reshape2)
library(wordcloud)
library(dplyr)
library(plotly)
install.packages("ggplot2")
install.packages("ggplot2")
library(tidytext)
library(reshape2)
library(wordcloud)
library(dplyr)
library(plotly)
shiny::runApp()
shiny::runApp()
library plotly
library(plotly)
runApp()
shiny::runApp()
